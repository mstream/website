---
- name: read cassandra config
  delegate_to: "{{ groups['databases'][0] }}"
  command: "cat {{ cassandra_config_file }}"
  register: cassandra_config_file_output
  run_once: yes

- set_fact:
    cassandra_seed_nodes: "{{ (cassandra_config_file_output.stdout|from_yaml).seed_provider[0].parameters[0].seeds.split(',') }}"

- name: create a functional user
  user:
    name: "{{ user_name }}"
    password: "{{ user_password_sha512_salted }}"
    createhome: yes
    home: "{{ home_dir }}"
    force: yes
    state: present

- name: set up the home directory
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ user_name }}"
    group: "{{ user_name }}"
    mode: 0755
  with_items:
    - "{{ bin_dir }}"
    - "{{ work_dir }}"
    - "{{ dist_dir }}"
    - "{{ conf_dir }}"

- name: create a server config
  template:
    src: config.yml.j2
    dest: "{{ conf_dir }}/{{ config_file }}"
    owner: "{{ user_name }}"
    group: "{{ user_name }}"
    force: yes
  notify:
    - restart the server service
    - wait for the server service

- name: create an environment setup script
  template:
    src: setenv.sh.j2
    dest: "{{ bin_dir }}/setenv.sh"
    owner: "{{ user_name }}"
    group: "{{ user_name }}"
    mode: 0755
    force: yes
  notify:
    - restart the server service
    - wait for the server service

- name: create a server start script
  template:
    src: start.sh.j2
    dest: "{{ bin_dir }}/start.sh"
    owner: "{{ user_name }}"
    group: "{{ user_name }}"
    mode: 0755
    force: yes
  notify:
    - restart the server service
    - wait for the server service

- name: download a package
  maven_artifact:
    repository_url: "{{ maven_repo_url }}"
    group_id: "io.mstream.website"
    artifact_id: "website-server"
    version: "{{ package_version }}"
    classifier: "fat"
    dest: "{{ dist_dir }}"
    username: "deployment"
    password: "{{ user_password }}"
    state: present

- name: create a server systemd service
  template:
    src: website.service.j2
    dest: /etc/systemd/system/website.service
    owner: root
    group: root
    force: yes
  notify:
    - reload the server service
    - restart the server service
    - wait for the server service
